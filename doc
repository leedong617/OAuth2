각각의 필터가 동작하는 주소 (관습)

- OAuth2AuthorizationRequestRedirectFilter

/oauth2/authorization/서비스명

/oauth2/authorization/naver
/oauth2/authorization/google

- OAuth2LoginAuthenticationFilter : 외부 인증 서버에 설정할 redirect_uri

/login/oauth2/code/서비스명

/login/oauth2/code/naver
/login/oauth2/code/google

//

변수 설정만 진행하면 OAuth2AuthorizationRequestRedirectFilter → OAuth2LoginAuthenticationFilter → OAuth2LoginAuthenticationProvider 까지의 과정을 추가 설정하지 않아도 자동으로 진행한다.
따라서 사용자는 UserDetailsService와 UserDetails만 구현하면 됨.

//

registration과 provider

registration은 외부 서비스에서 우리 서비스를 특정하기 위해 등록하는 정보여서 등록이 필수적.
하지만 provider의 경우 서비스별로 정해진 값이 존재하며 OAuth2 클라이언트 의존성이 유명한 서비스의 경우 내부적으로 데이터를 가지고 있음.
(구글, Okta, 페이스북, 깃허브, 등등)

//

OAuth2 서비스 변수 등록 방법

기존에 application.properties 변수 설정 파일에서 설정했던 소셜 로그인 제공 서비스에 대한 정보 기입을 관련 클래스를 통해 직접 진행하는 방법.
앞으로 커스텀을 진행하기 위해 클래스를 직접 구현하는 것이 필수적이다.

ClientRegistration

서비스별 OAuth2 클라이언트의 등록 정보를 가지는 클래스다.

ClientRegistrationRepository

ClientRegistration의 저장소로 서비스별 ClientRegistration들을 가진다.

//

로그인 페이지에서 GET : /oauth2/authorization/서비스 경로로 요청을 할 경우 OAuth2 의존성에 의해 OAuth2AuthorizationRequestRedirectFilter에서 해당 요청을 받고 내부 프로세서를 진행한다.

OAuth2AuthorizationRequestRedirectFilter는 요청을 받은 후 해당하는 서비스의 로그인 URI로 요청을 리디렉션 시킨다. (이때 서비스의 정보는 지난 시간 등록한 ClientRegistrationRepository에서 가져온다.)

OAuth2LoginAuthenticationFilter는 인증 서버에서 로그인을 성공한 뒤 우리 서버측으로 발급되는 CODE를 획득하고, CODE를 통해 Access 토큰과 User 정보를 획득하는 OAuth2LoginAuthenticationProvider를 호출하는 일련의 과정을 시작하는 필터이다.

OAuth2LoginAuthenticationFilter

OAuth2LoginAuthenticationFilter는 /login/oauth2/code/서비스명 경로에 대해서 CODE를 받는 필터이다.
이후 검증을 진행하고 완료되면 OAuth2LoginAuthenticationProvider를 호출한다.

OAuth2LoginAuthenticationProvider

OAuth2LoginAuthenticationFilter로 부터 호출 받아 전달 받은 정보를 통해 외부 인증 서버를 호출하여 Access 토큰을 발급 받는다.
이후 Access 토큰을 통해 외부 리소스 서버에서 유저 정보를 OAuth2UserService로 받는다.


OAuth2AuthorizedClientService

OAuth2 소셜 로그인을 진행하는 사용자에 대해 우리의 서버는 인증 서버에서 발급 받은 Access 토큰과 같은 정보를 담을 저장소가 필요하다.
기본적으로 인메모리 방식으로 관리되는데 소셜 로그인 사용자 수가 증가하고 서버의 스케일 아웃 문제로 인해 인메모리 방식은 실무에서 사용하지 않는다.
따라서 DB에 해당 정보를 저장하기 위해서는 OAuth2AuthorizedClientService를 직접 작성해야 한다.

